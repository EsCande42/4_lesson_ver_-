import asyncio
import logging
from telegram.ext import Application, MessageHandler, CallbackQueryHandler, filters, CommandHandler
from config.settings import get_settings
from handlers.text_handler import TextHandler
from handlers.settings_handler import SettingsHandler
from handlers.group_handler import GroupHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

async def start_command(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = """
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GPT Telegram Bot!

–Ø –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é:
‚Ä¢ –ü–æ—Ç–æ–∫–æ–≤—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–æ–≤
‚Ä¢ –†–∞–±–æ—Ç—É –≤ –≥—Ä—É–ø–ø–∞—Ö (—É–ø–æ–º—è–Ω–∏—Ç–µ –º–µ–Ω—è)
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥–µ–ª–∏
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤

–ö–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏
/help - –ü–æ–º–æ—â—å

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!
    """
    await update.message.reply_text(welcome_text.strip())

async def help_command(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞

üîπ <b>–õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:</b>
–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, –∏ —è –æ—Ç–≤–µ—á—É —Å –ø–æ–º–æ—â—å—é GPT

üîπ <b>–ì—Ä—É–ø–ø–æ–≤—ã–µ —á–∞—Ç—ã:</b>
–£–ø–æ–º—è–Ω–∏—Ç–µ –º–µ–Ω—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏: @your_bot_name

üîπ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ (/settings):</b>
‚Ä¢ –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ GPT
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã (–∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å)
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
‚Ä¢ Base URL –¥–ª—è API
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞

üîπ <b>AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç:</b>
–ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —á–µ—Ä–µ–∑ API —ç–Ω–¥–ø–æ–∏–Ω—Ç

üîπ <b>–ü–æ—Ç–æ–∫–æ–≤—ã–π —Ä–µ–∂–∏–º:</b>
–û—Ç–≤–µ—Ç—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –ø–æ —á–∞—Å—Ç—è–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    await update.message.reply_text(help_text.strip(), parse_mode='HTML')

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    settings = get_settings()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    application = Application.builder().token(settings.telegram_token).build()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    text_handler = TextHandler()
    settings_handler = SettingsHandler()
    group_handler = GroupHandler()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("settings", settings_handler.handle_settings_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–æ–≤ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    application.add_handler(CallbackQueryHandler(settings_handler.handle_settings_callback))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö
    application.add_handler(
        MessageHandler(
            filters.ChatType.PRIVATE & filters.TEXT & ~filters.COMMAND,
            text_handler.handle_text_message
        )
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–∞—Ö
    application.add_handler(
        MessageHandler(
            filters.ChatType.GROUPS & filters.TEXT & ~filters.COMMAND,
            group_handler.handle_group_message
        )
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    application.add_handler(
        MessageHandler(
            filters.ChatType.PRIVATE & filters.TEXT & ~filters.COMMAND,
            settings_handler.handle_text_input
        )
    )
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await application.run_polling()

if __name__ == "__main__":
    asyncio.run(main()) 