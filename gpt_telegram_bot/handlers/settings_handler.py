from telegram import Update, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from services.database_service import DatabaseService
from utils.keyboard import SettingsKeyboard
import re

class SettingsHandler:
    def __init__(self):
        self.db_service = DatabaseService()
        self.user_states = {}  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    async def handle_settings_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /settings"""
        user_id = update.effective_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await self.db_service.get_or_create_user(
            user_id=user_id,
            username=update.effective_user.username,
            first_name=update.effective_user.first_name,
            last_name=update.effective_user.last_name
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        settings = await self.db_service.get_user_settings(user_id)
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        message = self._format_settings_message(settings)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
        keyboard = SettingsKeyboard.get_main_settings_keyboard()
        
        await update.message.reply_text(
            message,
            reply_markup=keyboard,
            parse_mode='HTML'
        )
    
    def _format_settings_message(self, settings: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        ai_status = "‚úÖ –í–∫–ª—é—á–µ–Ω" if settings.get('use_ai_assistant') else "‚ùå –í—ã–∫–ª—é—á–µ–Ω"
        
        message = f"""
<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>

ü§ñ <b>–ú–æ–¥–µ–ª—å:</b> {settings.get('model', 'gpt-3.5-turbo')}
üå°Ô∏è <b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</b> {settings.get('temperature', 0.7):.1f}
üìè <b>–ú–∞–∫—Å. —Ç–æ–∫–µ–Ω—ã:</b> {settings.get('max_tokens', 1000)}
üîó <b>Base URL:</b> {settings.get('openai_base_url', 'https://api.openai.com/v1')}
ü§ñ <b>AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç:</b> {ai_status}

<i>–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:</i>
        """
        return message.strip()
    
    async def handle_settings_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        query = update.callback_query
        user_id = query.from_user.id
        data = query.data
        
        await query.answer()
        
        if data == "settings_model":
            await self._handle_model_selection(query)
        elif data == "settings_temperature":
            await self._handle_temperature_selection(query, user_id)
        elif data == "settings_max_tokens":
            await self._handle_max_tokens_selection(query, user_id)
        elif data == "settings_base_url":
            await self._handle_base_url_selection(query, user_id)
        elif data == "settings_ai_assistant":
            await self._handle_ai_assistant_selection(query, user_id)
        elif data == "settings_close":
            await query.edit_message_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–∫—Ä—ã—Ç—ã")
        elif data == "settings_back":
            await self._show_main_settings(query, user_id)
        elif data.startswith("model_"):
            await self._handle_model_change(query, user_id, data)
        elif data.startswith("temp_"):
            await self._handle_temperature_change(query, user_id, data)
        elif data.startswith("tokens_"):
            await self._handle_tokens_change(query, user_id, data)
        elif data.startswith("ai_assistant_"):
            await self._handle_ai_assistant_change(query, user_id, data)
    
    async def _show_main_settings(self, query, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        settings = await self.db_service.get_user_settings(user_id)
        message = self._format_settings_message(settings)
        keyboard = SettingsKeyboard.get_main_settings_keyboard()
        
        await query.edit_message_text(
            message,
            reply_markup=keyboard,
            parse_mode='HTML'
        )
    
    async def _handle_model_selection(self, query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏"""
        keyboard = SettingsKeyboard.get_model_selection_keyboard()
        await query.edit_message_text(
            "ü§ñ –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å GPT:",
            reply_markup=keyboard
        )
    
    async def _handle_model_change(self, query, user_id: int, data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏"""
        model = data.replace("model_", "")
        
        if model == "custom":
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ –º–æ–¥–µ–ª–∏ –≤—Ä—É—á–Ω—É—é
            self.user_states[user_id] = {"state": "waiting_model_input"}
            await query.edit_message_text(
                "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: gpt-4-custom):"
            )
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å
            await self.db_service.update_user_setting(user_id, "model", model)
            await query.edit_message_text(f"‚úÖ –ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {model}")
    
    async def _handle_temperature_selection(self, query, user_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã"""
        settings = await self.db_service.get_user_settings(user_id)
        current_temp = settings.get('temperature', 0.7)
        
        keyboard = SettingsKeyboard.get_temperature_keyboard(current_temp)
        await query.edit_message_text(
            "üå°Ô∏è –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É (–∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å):",
            reply_markup=keyboard
        )
    
    async def _handle_temperature_change(self, query, user_id: int, data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã"""
        settings = await self.db_service.get_user_settings(user_id)
        current_temp = settings.get('temperature', 0.7)
        
        if data == "temp_decrease":
            new_temp = max(0.0, current_temp - 0.1)
        elif data == "temp_increase":
            new_temp = min(1.0, current_temp + 0.1)
        else:
            return
        
        await self.db_service.update_user_setting(user_id, "temperature", new_temp)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = SettingsKeyboard.get_temperature_keyboard(new_temp)
        await query.edit_message_reply_markup(keyboard)
    
    async def _handle_max_tokens_selection(self, query, user_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤"""
        keyboard = SettingsKeyboard.get_max_tokens_keyboard()
        await query.edit_message_text(
            "üìè –í—ã–±–µ—Ä–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤:",
            reply_markup=keyboard
        )
    
    async def _handle_tokens_change(self, query, user_id: int, data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤"""
        if data == "tokens_custom":
            self.user_states[user_id] = {"state": "waiting_tokens_input"}
            await query.edit_message_text(
                "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ (–º–∏–Ω–∏–º—É–º 150):"
            )
        else:
            tokens = int(data.replace("tokens_", ""))
            await self.db_service.update_user_setting(user_id, "max_tokens", tokens)
            await query.edit_message_text(f"‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: {tokens}")
    
    async def _handle_base_url_selection(self, query, user_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ Base URL"""
        self.user_states[user_id] = {"state": "waiting_base_url_input"}
        await query.edit_message_text(
            "üîó –í–≤–µ–¥–∏—Ç–µ Base URL –¥–ª—è OpenAI API (–Ω–∞–ø—Ä–∏–º–µ—Ä: https://api.openai.com/v1):"
        )
    
    async def _handle_ai_assistant_selection(self, query, user_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
        settings = await self.db_service.get_user_settings(user_id)
        is_enabled = settings.get('use_ai_assistant', False)
        
        keyboard = SettingsKeyboard.get_ai_assistant_keyboard(is_enabled)
        await query.edit_message_text(
            "ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:",
            reply_markup=keyboard
        )
    
    async def _handle_ai_assistant_change(self, query, user_id: int, data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
        if data == "ai_assistant_toggle":
            settings = await self.db_service.get_user_settings(user_id)
            current_status = settings.get('use_ai_assistant', False)
            new_status = not current_status
            
            await self.db_service.update_user_setting(user_id, "use_ai_assistant", new_status)
            
            keyboard = SettingsKeyboard.get_ai_assistant_keyboard(new_status)
            await query.edit_message_reply_markup(keyboard)
            
        elif data == "ai_assistant_url":
            self.user_states[user_id] = {"state": "waiting_ai_url_input"}
            await query.edit_message_text(
                "üîó –í–≤–µ–¥–∏—Ç–µ URL API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:"
            )
    
    async def handle_text_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        user_id = update.effective_user.id
        text = update.message.text
        
        if user_id not in self.user_states:
            return
        
        state = self.user_states[user_id]["state"]
        
        if state == "waiting_model_input":
            await self._save_custom_model(update, user_id, text)
        elif state == "waiting_tokens_input":
            await self._save_custom_tokens(update, user_id, text)
        elif state == "waiting_base_url_input":
            await self._save_base_url(update, user_id, text)
        elif state == "waiting_ai_url_input":
            await self._save_ai_assistant_url(update, user_id, text)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        del self.user_states[user_id]
    
    async def _save_custom_model(self, update, user_id: int, model: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –º–æ–¥–µ–ª–∏"""
        await self.db_service.update_user_setting(user_id, "model", model)
        await update.message.reply_text(f"‚úÖ –ú–æ–¥–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {model}")
    
    async def _save_custom_tokens(self, update, user_id: int, tokens_text: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤"""
        try:
            tokens = int(tokens_text)
            if tokens < 150:
                await update.message.reply_text("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤: 150")
                return
            
            await self.db_service.update_user_setting(user_id, "max_tokens", tokens)
            await update.message.reply_text(f"‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: {tokens}")
        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
    
    async def _save_base_url(self, update, user_id: int, url: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ Base URL"""
        # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è URL
        if not url.startswith(('http://', 'https://')):
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL")
            return
        
        await self.db_service.update_user_setting(user_id, "openai_base_url", url)
        await update.message.reply_text(f"‚úÖ Base URL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {url}")
    
    async def _save_ai_assistant_url(self, update, user_id: int, url: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ URL AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
        # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è URL
        if not url.startswith(('http://', 'https://')):
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL")
            return
        
        await self.db_service.update_user_setting(user_id, "ai_assistant_url", url)
        await self.db_service.update_user_setting(user_id, "use_ai_assistant", True)
        await update.message.reply_text(f"‚úÖ URL AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {url}") 